@*

    This is the search bar found on the home and scedfule builder pages.

    Version 11.10.24

*@

<!-- Allow user to interact with the page -->
@rendermode InteractiveServer

<!-- Import the necessary interface model -->
@using ClassFindrDataAccessLibrary.Models

<div class="search-bar-container">
    
    @{
        string style = "";

        if (showSearchList)
        {
            style = "border-bottom-left-radius: 0px; border-bottom-right-radius: 0px;";
        }
    }

    <!-- The text box where the user inputs the text to search on -->
    <input 
        type="text"
        style="@style"
        placeholder="Search for a @(ObjectType)..."
        @bind="@searchValue"
        @bind:event="oninput"
        @onkeyup="SearchList"
        @onfocusin="() => showSearchList = true"
        @onfocusout="async () => {await Task.Delay(100); showSearchList = false;}"
    />

    <!-- Show the search list if needed -->
    @if (showSearchList)
    {
        <div class="search-list">

            <!-- Display the items within the search list if not empty -->
            @if (searchList.Any())
            {
                // Iterate through each item and add it to the results pane
                foreach (string item in searchList)
                {
                    <div class="list-item" @onclick="() => OnItemClicked(item)">
                        @item
                    </div>
                }
            }
            else
            {
                <br/>
                <em class="empty-message">No @ObjectType could be found.</em>
            }

        </div>
    }
</div>


@code {

    /// <summary> The passed lsit of items to searchand sort upon </summary>
    [Parameter, EditorRequired]
    public IEnumerable<ISearchableItem>? ItemList { get; set; }

    /// <summary> Event handling for when a user selects an item </summary>
    [Parameter, EditorRequired]
    public EventCallback<string> OnSearch { get; set; }

    /// <summary> Name of the object type, displayed when filtered list is empty </summary>
    [Parameter]
    public string ObjectType { get; set; } = @"object";

    private bool showSearchList = false;
    private string? searchValue;
    private List<string> searchList = new();

    // Search and filter the list
    private void SearchList()
    {
        searchList = new ();     // Reset the search list

        if (ItemList != null)
        {
            foreach (var item in ItemList)
            {
                // Get the item from the list
                string outItem = (item.GetSearchableAspect() ?? "").Trim();

                // If the item contains the sequence of string, then add it to the output
                if (searchValue != null && searchValue.Any())
                {
                    if (outItem.ToLower().Contains(searchValue.Trim().ToLower()))
                    {
                        searchList.Add(outItem);
                    }
                }
            }
        }

        searchList.Sort();  // Sort the items
    }

    // Runs when an item has been clicked
    private async Task OnItemClicked(string item)
    {
        await OnSearch.InvokeAsync(item);
    }

}
