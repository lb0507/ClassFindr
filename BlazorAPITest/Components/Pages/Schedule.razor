@*

    Schedule page for viewing the user's current schedule

    Version 11.15.24

*@

<!-- Link to the page -->
@page "/view_schedule"

<!-- Set the render mode to interactive server -->
@rendermode InteractiveServer

<!-- Import the API calls and necessary models -->
@using ClassFindrDataAccessLibrary
@using ClassFindrDataAccessLibrary.Models
@using ClassFindrDataAccessLibrary.Utils

<!-- Inject the necessary dependencies -->
@inject IUserData _user
@inject IScheduleData _schedule
@inject NavigationManager _nav

<!-- The name of the browser tab -->
<PageTitle>Schedule Page</PageTitle>


<!-- Main body content -->
<div class="content px-4 background">
    <div class="fontBox">

        <h3>Hello, <b>@(loggedInUser?.Username ?? "User")</b>!</h3>
        <br/>
        <p>Use the table below to view your schedule</p>


        <div class="schedule-table">

            <!-- Main information table on the page -->
            <table class="w-100">

                <thead style="border-bottom: 5px double">
                    <tr>
                        <td style="width: 10%">
                            <b>Course Code</b>
                        </td>
                        <td style="width: 20%">
                            <b>Name</b>
                        </td>
                        <td style="width: 50%">
                            <b>Description</b>
                        </td>
                        <td style="width: 20%">
                            <b>Time</b>
                        </td>
                    </tr>
                </thead>

                <tbody>

                    <!-- Check to see if the user has any classes in their schedule -->
                    @if (builtSchedule != null && builtSchedule.Any()) 
                    {
                        // Iterate through the items in the user's schedule
                        foreach (var item in builtSchedule)
                        {
                            <tr>
                                <td>
                                    @item.CourseCode
                                </td>
                                <td>
                                    @item.Name
                                </td>
                                <td>
                                    @item.Description
                                </td>
                                <td>
                                    @DateParser.GetScheduledTime(item)
                                </td>
                            </tr>
                        }
                    }

                </tbody>

            </table>

            <!-- Display a message if the user's schedule is empty -->
            @if (!(builtSchedule != null && builtSchedule.Any()))
            {
                <br />
                <em>Your schedule is empty... for now.</em>
            }

        </div>

    </div>

    <div class="bottom-button-container">


        @*
        FUTURE DEVELOPMENT
        __________________

        <button>
        Download Schedule as CSV
        </button>

        <button>
        Download Schedule as PDF
        </button>
        *@

        <button @onclick=HandleRouteSchedule>
            Route Today's Schedule
        </button>

        <button @onclick="NavigateToManagePage">
            Manage Schedule
        </button>

    </div>

</div>


@code {

    private UserModel? loggedInUser;
    private List<ClassModel>? builtSchedule;


    // Routes to the shcedule management page
    private void NavigateToManagePage()
    {
        _nav.NavigateTo("/manage_schedule");
    }

    private void HandleRouteSchedule()
    {
        _nav.NavigateTo("/route_schedule={testID}");
    }

    // Initialize the user model with the currently signed in user
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = _user.GetUserSignOnInfo();
        builtSchedule = await _schedule.GetUserSchedule();
    }

}