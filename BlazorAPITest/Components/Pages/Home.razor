@*

    The home page of the project.  Implementation of Leaflet with navigation.

    It's important that we nail this, as it will be the page that 
    the user spends most of their time on.

    Version 11.10.24
    
*@

<!-- Link to the page -->
@page "/"
@page "/route_schedule={ScheduleID}"

<!-- Allow user to interact with the page -->
@rendermode InteractiveServer

<!-- Import the API calls and necessary models -->
@using ClassFindrDataAccessLibrary
@using ClassFindrDataAccessLibrary.Models

<!-- Inject the JavaScript dependency for using JS -->
@inject IJSRuntime JSRuntime
@inject IBuildingData _dbBuilding
@inject IClassData _dbClass
@inject IScheduleData _schedule

<!-- Name of the browser tab -->
<PageTitle>Home</PageTitle>


<div class="content px-4 background">

    <h1>Home Page</h1>

    <div class="main-body">

        @* !!! STAR OF THE SHOW !!! *@
        @* ====================================== *@
        <div class="map-container">

            <!-- MAP WITH LEAFLET -->
            <div id="map" style="height: 80vh" />

            <!-- Interaction menu -->
            <div class="interaction-menu">

                <div class="interactable">
                    <u style="padding-right: 10px">Map Style:</u>

                    <select @onchange="SwitchMap">
                        <option selected>Default</option>
                        <option>Satellite</option>
                    </select>
                </div>

                <div class="interactable">
                    <input type="checkbox" @onchange="OnShowAccuracyClicked"/>
                    <label>Show Accuracy</label>
                </div>

            </div>

        </div>
        @* ====================================== *@

        @* Information box for the associated building *@
        <div class="info-container">

            <div class="interaction-menu" style="display: inline-flex">

                <SearchBar
                    ItemList="@buildingList"
                    OnSearch="UpdateSearch"
                    ObjectType="buildings"
                />

                <div class="nav-button-container">
                    <button class="navigate-icon begin-nav" @onclick="HandleNav">
                        <div style="padding: 7px">
                            <i class="bi bi-geo-alt-fill" />
                        </div>
                    </button>
                </div>

            </div>

            <div id="markerInfo" />
        
        </div>

        <br/>

    </div>

</div>


@code {

    [Parameter]
    public string? ScheduleID { get; set; }

    private IJSObjectReference? module;     // Object for invoking JavaScript functions
    private string? result;     // Result of JavaScript functions

    private string? name;
    private string? desc;
    bool isNav = true;

    private List<BuildingModel> buildingList = new();


    #region [Methods]

    // This method sets up the map
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Fetch the list of buildings through the API
            buildingList = await _dbBuilding.FetchBuildings();

            // Imports the JS functions from Map.js
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Map.js");

            if (module != null)
            {
                // Execute the load map function
                result = await module.InvokeAsync<string>("load_map");

                // Iterate through each building and add it's associated marker
                foreach (var building in buildingList)
                {
                    await module.InvokeVoidAsync("add_marker", building.Latitude, building.Longitude, building.Name, building.Description, building.ImageSource);
                }

                await module.InvokeVoidAsync("reset_navigation");

                if (ScheduleID != null)
                {
                    RouteSchedule();
                }
            }

            StateHasChanged();  // Refresh the parameters for the search bar
            
            // Route the schedule of the passed user if routing schedule
            if (scheduleRef != null) 
            {
                
            }
        }        
    }


    private async void RouteSchedule()
    {
        List<ClassModel> classes = await _schedule.GetUserSchedule();

        // Get the list of buildings associated with the user's schedule
        List<BuildingModel> buildings = await _dbClass.GetClassBuildings(classes);

        List<Tuple<float, float, DateTime>> cData = new ();


        foreach (var b in buildings)
        {
            cData.Add
            (
                new Tuple<float, float, DateTime>
                (
                    b.Latitude,
                    b.Longitude,
                    classes.ElementAt(buildings.IndexOf(b)).Time
                )
            );
        }

        // Sort the list based on the passed class time
        cData.Sort
        (
            (left, right) => (int) (left.Item3 - right.Item3).Ticks 
        );

        float[] lats = (from c in cData select c.Item1).ToArray();
        float[] lons = (from c in cData select c.Item2).ToArray();
        DateTime[] times = (from c in cData select c.Item3).ToArray();

        await module!.InvokeVoidAsync("navigate_schedule", lats, lons, times);
    }

    // Runs when a user selects a building from the search bar
    private void UpdateSearch(string building)
    {
        // Sequentially search for the selected building
        foreach (var b in buildingList)
        {
            if (b.Name == building)
            {
                module!.InvokeVoidAsync("update_info", b.Latitude, b.Longitude, b.Name, b.Description, b.ImageSource);
                break;
            }
        }
    }

    #region Map functions

    // Switch the map being viewed
    private void SwitchMap(ChangeEventArgs e)
    {
        module?.InvokeVoidAsync("switch_map", e?.Value?.ToString());
    }

    // Determines whether or not to show the location accuracy
    private async void OnShowAccuracyClicked(ChangeEventArgs e)
    {
        // Attempt to parse the string value from the checkbox
        if (Boolean.TryParse(e?.Value?.ToString(), out bool result)) {
            await module!.InvokeVoidAsync("show_accuracy", result);
        }
    }

    // Call JS function to navigate user to the selected building
    private async void HandleNav(MouseEventArgs e)
    {
        // get if the user is currently navigating or not
        isNav = await module!.InvokeAsync<bool>("is_navigated");

        await module!.InvokeVoidAsync("reset_navigation");

        // Get the currently slected coordinates
        float[] bCoords = await module!.InvokeAsync<float[]>("get_coords");
        float[] rCoords = await module!.InvokeAsync<float[]>("get_route_coords");

        if (!isNav || bCoords[0] != rCoords[0] && bCoords[1] != rCoords[1])
        {
            // Check for underflow
            if (bCoords != null && bCoords.Length >= 2)
            {
                // Surround with try catch in event user location cannot be found
                try
                {
                    await module!.InvokeVoidAsync("navigate_user", bCoords[0], bCoords[1]);
                }
                catch (Exception) { }
            }
        }
    }

    #endregion

    #endregion

}