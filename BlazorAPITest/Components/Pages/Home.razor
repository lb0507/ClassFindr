@*

    The home page of the project.  Implementation of Leaflet with navigation.

    It's important that we nail this, as it will be the page that 
    the user spends most of their time on.

    Version 11.4.24
    
*@

<!-- Link to the page -->
@page "/"

<!-- Allow user to interact with the page -->
@rendermode InteractiveServer

<!-- Import the API calls and necessary models -->
@using ClassFindrDataAccessLibrary
@using ClassFindrDataAccessLibrary.Models

<!-- Inject the JavaScript dependency for using JS -->
@inject IJSRuntime JSRuntime
@inject IBuildingData _db

<!-- Name of the browser tab -->
<PageTitle>Home</PageTitle>


<div class="content px-4 background">

    <h1>Home Page</h1>

    <div class="main-body">

        @* !!! STAR OF THE SHOW !!! *@
        @* ====================================== *@
        <div class="map-container">

            <!-- MAP WITH LEAFLET -->
            <div id="map" style="height: 80vh" />

            <!-- Interaction menu -->
            <div class="interaction-menu">

                <div class="interactable">

                    <u> Map Style: </u>

                    <select @onchange="SwitchMap">
                        <option selected>Default</option>
                        <option>Satellite</option>
                    </select>

                </div>

            </div>

        </div>
        @* ====================================== *@

        @* Information box for the associated building *@
        <div class="info-container">

            <div class="interaction-menu">

                <input type="text"/>

            </div>

            <div id="markerInfo" />
        
        </div>

        <br/>

    </div>

</div>


@code {

    private IJSObjectReference? module;
    private string? result;

    private string? name;
    private string? desc;

    private List<BuildingModel> buildingList = new();

    // This method sets up the map
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Fetch the list of buildings through the API
            buildingList = await _db.FetchBuildings();

            // Imports the JS functions from Map.js
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Map.js");

            if (module != null)
            {
                // Execute the load map function
                result = await module.InvokeAsync<string>("load_map");

                // Iterate through each building and add it's associated marker
                foreach (var building in buildingList)
                {
                    await module.InvokeVoidAsync("add_marker", building.Latitude, building.Longitude, building.Name, building.Description, building.ImageSource);
                }
            }

        }
    }

    protected override void OnInitialized()
    {
        module?.InvokeAsync<string>("load_map");
    }

    // Switch the 
    private void SwitchMap(ChangeEventArgs e)
    {
        module?.InvokeVoidAsync("switch_map", e?.Value?.ToString());
    }

}