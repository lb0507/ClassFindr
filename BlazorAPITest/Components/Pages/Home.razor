@*

    The home page of the project.  Implementation of Leaflet with LRM navigation.

    It's important that we nail this, as it will probably be the page that 
    the user spends most of their time on.

    Version 11.23.24
    
*@

<!-- Link to the page -->
@page "/"

<!-- Allow user to interact with the page -->
@rendermode InteractiveServer

<!-- Import the API calls, necessary models, and utility -->
@using ClassFindrDataAccessLibrary
@using ClassFindrDataAccessLibrary.Models
@using ClassFindrDataAccessLibrary.Utils

<!-- Inject the JavaScript dependency for using JS-->
@inject IJSRuntime JSRuntime

<!-- Inject mapbox configuration data -->
@inject IMapBoxConfig _mbConfig

<!-- Inject the navigation manager for navigated to pages -->
@inject NavigationManager _nav

<!-- Inject the necessary API dependencies for this page to function -->
@inject IBuildingData _dbBuilding
@inject IClassData _dbClass
@inject IScheduleData _schedule

<!-- Name of the browser tab -->
<PageTitle>Home</PageTitle>


<!-- Main body content of the page -->
<div class="content px-4 background">

    <h1>Home Page</h1>

    <div class="main-body">

        @* !!! STAR OF THE SHOW !!! *@
        @* ====================================== *@
        <div class="map-container">

            <!-- MAP WITH LEAFLET -->
            <div id="map" style="height: 80vh" />

            <!-- Interaction menu -->
            <div class="interaction-menu">

                <!-- Switch map dropdown -->
                <div class="interactable">
                    <u style="padding-right: 10px">Map Style:</u>
                    <select @onchange="SwitchMap">
                        <option selected>Default</option>
                        <option>Satellite</option>
                    </select>
                </div>

                <!-- Show accuracy button -->
                <div class="interactable">
                    <input type="checkbox" @onchange="OnShowAccuracyClicked"/>
                    <label>Show Accuracy</label>
                </div>

            </div>

        </div>
        @* ====================================== *@

        @* Information box for the associated building *@
        <div class="info-container">

            <div class="interaction-menu" style="display: inline-flex">

                <!-- Search bar where a user can search for buildings -->
                <SearchBar
                    ItemList="@buildingList"
                    OnSearch="UpdateSearch"
                    ObjectType="buildings"
                />

                <!-- Button to navigate user to the selected building -->
                <div class="nav-button-container">
                    <button class="navigate-icon begin-nav" @onclick="HandleNav">
                        <div style="padding: 7px">
                            <i class="bi bi-geo-alt-fill" />
                        </div>
                    </button>
                </div>

            </div>

            <!-- Building information, gets updated via JavaScript -->
            <div id="markerInfo" />
        
        </div>

        <br/>

    </div>

</div>


@code {

    // The passed encrypted schedule ID
    [Parameter]
    public string? ScheduleID { get; set; }

    private IJSObjectReference? module;     // Object for invoking JavaScript functions
    private string? result;     // Result of JavaScript functions

    bool isNav = true;  // Holds whether or not the user is currently being navigated or not

    // List of buildings to do all of the cool stuff with
    private List<BuildingModel> buildingList = new();


    #region [Methods]

    // This method sets up the map and any neccessary data
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Fetch the list of buildings through the API
            buildingList = await _dbBuilding.FetchBuildings();

            // Imports the JS functions from Map.js
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Map.js");

            if (module != null)
            {
                // Execute the load map function
                result = await module.InvokeAsync<string>("load_map", _mbConfig.Key);

                // Iterate through each building and add it's associated marker
                foreach (var building in buildingList)
                {
                    await module.InvokeVoidAsync("add_marker", building.Latitude, building.Longitude, building.Name, building.Description, building.ImageSource);
                }

                await module.InvokeVoidAsync("reset_navigation");   // Initialize navigation

                // Check if the schedule route should show or not
                if (_schedule.GetRouteShowable())
                {
                    RouteSchedule(9);
                }
            }

            StateHasChanged();  // Refresh the parameters for the search bar
        }        
    }


    /// <summary>
    ///     Runs when a user selects a building from the search bar
    /// </summary>
    /// <param name="building"> The string to search the list upon </param>
    private void UpdateSearch(string building)
    {
        // Sequentially search for the selected building
        foreach (var b in buildingList)
        {
            if (b.Name == building)
            {
                module!.InvokeVoidAsync("update_info", b.Latitude, b.Longitude, b.Name, b.Description, b.ImageSource);
                break;
            }
        }
    }

    #region Map functions

    /// <summary> Switches the map tileset </summary>
    private void SwitchMap(ChangeEventArgs e)
    {
        module?.InvokeVoidAsync("switch_map", e?.Value?.ToString());
    }

    /// <summary> Determines whether or not to show the location accuracy </summary>
    private async void OnShowAccuracyClicked(ChangeEventArgs e)
    {
        // Attempt to parse the string value from the checkbox
        if (Boolean.TryParse(e?.Value?.ToString(), out bool result)) {
            await module!.InvokeVoidAsync("show_accuracy", result);
        }
    }

    #region Navigation

    /// <summary> Handler for when the user clicks the navigation button </summary>
    private async void HandleNav(MouseEventArgs e)
    {
        if (_schedule.GetRouteShowable())
        {
            _schedule.SetShowable(false);   // Set the schedule navigation to false
            _nav.Refresh();     // Refresh the page, resets the map when routing the schedule
        }

        // get if the user is currently navigating or not
        isNav = await module!.InvokeAsync<bool>("is_navigated");

        await module!.InvokeVoidAsync("reset_navigation");

        // Get the currently slected coordinates
        float[] bCoords = await module!.InvokeAsync<float[]>("get_coords");
        float[] rCoords = await module!.InvokeAsync<float[]>("get_route_coords");

        if (!isNav || bCoords[0] != rCoords[0] && bCoords[1] != rCoords[1])
        {
            // Check for underflow
            if (bCoords != null && bCoords.Length >= 2)
            {
                // Surround with try catch in event user location cannot be found
                try
                {
                    await module!.InvokeVoidAsync("navigate_user", bCoords[0], bCoords[1]);
                }
                catch (Exception) { }
            }
        }
    }


    /// <summary> Routes the user's schedule based upon what day of the week it is </summary>
    private async void RouteSchedule(int sRef)
    {
        string currDay = "";    // Container for the current day

        // Determine the current day of the week
        switch (DateTime.Now.DayOfWeek)
        {
            case DayOfWeek.Sunday:
                currDay = "Th";
                break;

            case DayOfWeek.Monday:
                currDay = "M";
                break;

            case DayOfWeek.Tuesday:
                currDay = "Tu";
                break;

            case DayOfWeek.Wednesday:
                currDay = "W";
                break;

            case DayOfWeek.Thursday:
                currDay = "Th";
                break;

            case DayOfWeek.Friday:
                currDay = "F";
                break;

            case DayOfWeek.Saturday:
                currDay = "Sa";
                break;
        }

        List<ClassModel> classes = new();  // Container for the user's schedule

        // Filter the class list to only have today's classes
        foreach (var c in await _schedule.GetUserSchedule())
        {
            // See if the scheduled days of the class match the current day
            if ((c.Days ?? "").Contains(currDay))
            {
                classes.Add(c);
            }
        }

        // Get the list of buildings associated with the user's schedule
        List<BuildingModel> buildings = await _dbClass.GetClassBuildings(classes);

        // Tuple of the required data to pass into the API call
        //
        // The reason why this is a tuple and not seperate lists is because we need to
        // sort the data as one unit when comparing scheduled class time
        List<Tuple<float, float, DateTime>> cData = new();

        // Iterate through the list of classes and get the required data
        foreach (var b in buildings)
        {
            cData.Add
            (
                new Tuple<float, float, DateTime>
                (
                    b.Latitude,
                    b.Longitude,
                    classes.ElementAt(buildings.IndexOf(b)).Time
                )
            );
        }

        // Sort the list based on the passed class time
        cData.Sort
        (
            (left, right) => (int)(left.Item3 - right.Item3).Ticks
        );

        // Convert the lists into an arrays so JavaScript doesnt whine
        float[] lats = (from c in cData select c.Item1).ToArray();
        float[] lons = (from c in cData select c.Item2).ToArray();
        int[] times = (from c in cData select c.Item3.Hour).ToArray();

        await module!.InvokeVoidAsync("navigate_schedule", lats, lons, times);
    }

    #endregion

    #endregion

    #endregion

}