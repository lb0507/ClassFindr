@*

    Manage Schedule page for modifying the user's schedule

    Version 11.24.24

*@

<!-- Link to the page -->
@page "/manage_schedule"

<!-- Set the render mode to interactive server -->
@rendermode InteractiveServer

<!-- Import the API calls and necessary models -->
@using ClassFindrDataAccessLibrary
@using ClassFindrDataAccessLibrary.Models
@using ClassFindrDataAccessLibrary.Utils

<!-- Inject the necessary dependencies -->
@inject NavigationManager _nav
@inject IUserData _user
@inject IClassData _classes
@inject IScheduleData _schedule

<!-- The name of the browser tab -->
<PageTitle>Schedule Page</PageTitle>


<!-- Main body content -->
<div class="content px-4 background">
    <div class="fontBox">

        <SearchBar
            @ref=searchBar
            ItemList="@availableClasses"
            OnSearch="AddClass"
            ObjectType="class"
        />

        <div class="schedule-table" style="@((searchBar.GetListIsShowing()) ? "margin-top: calc(-300px + 1%)" : "")">

            <!-- Main information table on the page -->
            <table class="w-100">

                <thead style="border-bottom: 5px double">
                    <tr>
                        <td style="width:3%"/>
                        <td style="width: 10%">
                            <b>Course Code</b>
                        </td>
                        <td style="width: 20%">
                            <b>Name</b>
                        </td>
                        <td style="width: 47%">
                            <b>Description</b>
                        </td>
                        <td style="width: 20%">
                            <b>Time</b>
                        </td>
                    </tr>
                </thead>

                <tbody>

                    <!-- Check to see if the user has any classes in their schedule -->
                    @if (builtSchedule != null && builtSchedule.Any())
                    {
                        // Iterate through the items in the user's schedule
                        foreach (var item in builtSchedule)
                        {
                            <tr>
                                <td style="border: none">
                                    <div class="remove-button" @onclick="() => HandleRemoval(item)">
                                        X
                                    </div>
                                </td>
                                <td>
                                    @item.CourseCode
                                </td>
                                <td>
                                    @item.Name
                                </td>
                                <td>
                                    @item.Description
                                </td>
                                <td>
                                    @DateParser.GetScheduledTime(item)
                                </td>
                            </tr>
                        }
                    }

                </tbody>

            </table>

            <!-- Display a message if the user's schedule is empty -->
            @if (!(builtSchedule != null && builtSchedule.Any()))
            {
                <br />
                <em>Your schedule is empty... for now.</em>
            }
            
        </div>

    </div>
</div>


@code {

    private SearchBar searchBar = new SearchBar();
    private UserModel? loggedInUser;
    private List<ClassModel> availableClasses = new ();
    private List<ClassModel> builtSchedule = new ();


    // Initialize the user model with the currently signed in user
    protected async override Task OnInitializedAsync()
    {
        // Route the user back to the home page if they aren't signed in
        if (_user.GetUserSignOnInfo() == null)
        {
            _nav.NavigateTo("/");
        }

        loggedInUser = _user.GetUserSignOnInfo();
        availableClasses = await _schedule.GetUserSchedule();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        StateHasChanged();
    }


    // Adds a class to the user's built schedule
    private void AddClass(string c)
    {
        string code = c.Trim().Remove(0, c.IndexOf('('));

        foreach (var item in availableClasses)
        {
            if (code == $"({item.CourseCode})")
            {
                builtSchedule.Add(item);
                availableClasses.Remove(item);
                break;
            }
        }
    }

    // Handles the removal of a class from the user's built schedule
    private void HandleRemoval(ClassModel c)
    {
        availableClasses.Add(c); 
        builtSchedule.Remove(c);
        searchBar.RefreshList();
    }

}